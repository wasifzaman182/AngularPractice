Architecture of angular:
=======================:

        ==> Modules
                   --> The different functionality of a website is called modules like user, admin etc. 
                   --> which represent feature area.

                   Note:
                   --> Each angular application has at least one module which is AppModule -->root module  
                   --> Each module is in turn made up of component and services.
        
        ==> Component
                   --> The component is controlling the view part on the browser 
                        
                        eg: 
                         --> component for Navigation one for sidebar
                         --> component for main content

                    Note: 
                    --> The angular applicaiton will at least have one root component that is AppComponent  
                    --> All other component will be put inside in this main component (Root Component)
                    --> Each component contains and HTML template and a class to control the logic for that particular view module

        ==> Services
                    --> Services which is basically a class that contains the business logic of your application in addition to components and services.
        

        Note:
                Modules interact and ultimately render the view in the browser.

================================================================================================================================================================

                                        Different files in project
                                        ==========================

Packages.json
=============:
            --> Contains the dependencies and the dev dependencies which are nothing but the libraries or modules there that are required for your angualr application 
                to work the packages listed here get installed when you run the command ng new hello world and all the packages and get installed inside the node modules folder.

            --> We have some of the scripts that can be executed the ng self command is one of them which runs our applicaiton you can also execute npm start which
                will internally call the ng serve command.


main.js
=======:
           --> main.js file is the entry point for the project

App module.ts
=============:
           --> app module is the root app module for the project

App Component.ts
================:
            --> app component is the root app component for the project
    

  Note:
  =====: 

        --> When application run main.ts file will kick start app module.ts and app module.ts will kickstart AppComponent.ts   

===========================================================================================================================================================

What is component in angular?
=============================
                            --> Component is made of three things
                                1) Template: 
                                            Tamplate in the component is the view part or HTML file.
                                2) Class:
                                            A class in the component is the typescript code that contain Data and mehtods to show or hide some functionlity on the view.
                                3) Metadata:
                                        --> A metadata in the component is the information on which angular needs to decide that if particular class in fact an angular component or just a class.
                                        --> the meta data is defined using a decorator which is a feature in typescript, a decorator is just a function that provides information about the class attached to it and for component we use the component decorator.


@Component decorator:
=====================:
                       component decorator contain three things
                       1) selector:
                          =========
                                  --> Selector is basically a custom HTML tag that can be used to represent the component (class), when you specify selector in HTML, angular renders the component template in its place.

                        2) TemplateUrl:
                           ===========
                                    --> Selector hit the templateurl and the templateurl points to an HTML file that represents the view for the component 
                                     --> We can also use inline html by changing templateurl into template and start using in between  ``

                        3) styleUrls:
                           ========== 
                                    --> styleurls points the style file of the component.
                                    --> We can also use inline css by changing styleurl into style and start using in between  ``

Data Binding in angular:
=======================:
                        --> we can bind data by using double curly braces {{}} (Check code examples)
                        --> we can contact data by using + between two strings 

Difference between Property and Attribute
=========================================
        --> Attributes and properties are not the same.
        --> Attributes are HTML.
        --> Properites are DOM (Document Object Model)
        --> Attributes initialize DOM properites and then they are done.Attributes values cannot change once they are initialized.
        --> Property values howerver can change.
       

Property Binding in Angular:
============================

        --> We can also use interpolation for property binding but we can only bind string value.
        --> Data binding with interpolation cannot work with boolean property such as disabled.
        --> We can also bind property using "bind-property name" (check the code in test.component.ts)

Class Binding for styles in Angular:
====================================
        --> This can be done using example --> check code below <h2> Class binding </h2> in test.component.ts
        
    Note:
        --> you can only use class binding or proprty binding (for test check the example 3 in test.component.ts) but not both at same time.
            if you use both 

        --> Conditionaly applying html (find the code example wiht the name of conditionaly applying html).

How to apply multiple classes:
==============================
        --> We can conditionaly apply multiple class on on heading by using [ngClass] ( check the code example).


Event Binding:
=============:

        Two types of binding
        1) Data binding --> when we pass data from class to template is called data binding
        2) Event binding --> when we pass data from template to class is called event binding.
        (check out the code and click on great example)

Template Reference Variables:
============================:
        --> we will need these variables whenever we need to pass data from view to class and perform some validations
            (Check out the code example)  


Two way binding:
===============:
        --> Two way binding is the type of binding in which view changes will be directly refected into class and class changes will be directedly reflected into view.


Structural Directives:  (for the structural directives example created seprate component called structural direcitves)
======================
        Three types of structural directives --> to add or remvoe HTML elements from the DOM
        1) ngIf --> use to conditional render the html elements 
        2) ngSwitch --> use to conditional render the html elements
        3) ngFor  --> use to render list of HTML elements 


Component Interaction:
=====================
        --> This concept come into picture when parent component want to shar some data with child and child wants to shar with parent.
        Note:
        --> when parent wants to share data with child component it can be done by using @input decorator
        --> when child  wants to share data with parent component it can be done by using @output decorator



Pipes In Angular: (created new component for coding practice purpose name as pipes.component.ts)
================
        --> Pipes allows us to transform data before showing on the view.
        --> for upper and lower case we use | pipe see example.

        Note:
        =====
         --> this will only change data for view

Services:
=========
why to use severvice
        1) A class with a specific purpose
        2) share date
        3) implement application logic
        4) External Interaction

 Note:
 =====
      Naming convention -.service.ts

 Dependancy Injection: (All the practicle will be done in EmployeeService, employeelist, employeeDetails ) creating the service using commond ng g s employee
 =====================
        --> examples will be done in employeelist and employee details components
        --> you will find the @injectable decorator on the service which is includede by angular cli, this means may be this service class also dependent on other services also, so it is mendatory.
        --> why @injectable decorator is not on the component --> the reason is @component decorator tills the angular that may be i have to inject the services so in other words it also work of @injectable decorator as well.

           --> it will be good idea to register the base service in the app module provider array, this will be available across the application 
        1) --> Code without DI - drawbacks
        ================================
        e.g
                public class Engine{
                        Engine(param); //after adding param the line no 203 will show an error 
                }
                public class Tires{
                        Tires();
                }

                public class Car{
                        engine;
                        tires;
                        Car(){
                                this.engine=new Engine();
                                this.tires=new Tires();
                        }
                }

       Note:
       ==== 
        --> if we change in engine constructor the object of engine in car class will broke. it is the first drawback
        --> can not test with this  behaviour
       

       2) --> DI as a design pattern
        ============================
               --> DI is a coding pattern in which a class receives its dependencies from external source rather than creating them itself.
                e.g
  
           public class Engine{
                        Engine();
                }
                public class Tires{
                        Tires();
                }

                public class Car{
                        engine;
                        tires;
                        Car(engine, tires)
                        {
                                this.engine=engine;
                                this.tires=tries;
                        }
            
        }

         // code will run perfectly 
        var e = new Engine();
        var t = new tire();
        var mCar = new Car(e, t);

        Note        
        ===:
           --> now if there is any change the car code will not be broke.     
           --> but there is also an issue, if we have 100s of class and car class is dependent on it and some class are dependent on other classes then this will create         problem     

       3) --> DI as a framework:
        =======================
               --> in this case we create injector which is basically a container that will hold all the objects 
               E.g
                Define the EmployeeService class
                Register with injector 
                Declare as dependancy in Emplist and EmpDetail



HTTP and Observables in Angualr: (For testing purpose i created json file in assets--> data-->empolyee.json)
===============================:
--> observables is when http response back is called observables. for observables it is mendatory to subscribe it for those can data only be provided.
--> A sequence of items that arrive asynchronously over time.
--> HTTP call - single item
--> Single item - HTTP response
--> HttpClientModule is used --> first import it in app module so it is accessable in app module.

Catch operator on HTTP call: (example is done in employee service) //TODO: will cover it from other sources video 22
===========================:
  --> To handle the exception on http we need to use catch operator 



Routing in Angular:
===================
 --> Routing is used to navigate from one view to another view

 Add the AppRoutingModule
=========================
--> In Angular, the best practice is to load and configure the router in a separate, top-level module. The router is dedicated to routing and imported by the root AppModule.

--> By convention, the module class name is AppRoutingModule and it belongs in the app-routing.module.ts in the src/app directory.

--> Run ng generate to create the application routing module.
      
--> ng generate module app-routing --flat --module=app

      -->  Parameter 	Details
        --flat 	         Puts the file in src/app instead of its own directory.
        --module=app 	Tells ng generate to register it in the imports array of the AppModule.
=======================================================================================================

Important points:
================
                --> All the components that we created using command it will added in declarations array in app module
                --> The root component of the whole angular application is app component.html and all other components will render in the root component
                    (this step is done using test component for reference check the code)
               
Different ways to call component selector:
=========================================
                                          --> by using <name of component></name of component>
                                          --> by making selector a class like .nameOf_component and the call it as <div class="nameof_component"></div>
                                          --> by using brackets like selector:[nameof_component] and call it as attributes <div nameof_component></div>

=======================================================================================================
Different commonds of angualr   
1) to genereate angualr project --> ng new "project name"
2) to generate a component --> ng g c "component name"
